1. Check python version= python --version

2. Check django version= python -m django --version

3. If not install them,
= pip install django 
= pip install djangorestframework

4. Create a django project= django-admin startproject test		// "test" is project name
If doesn't work, second option= python3 -m django startproject test

5. Open that project folder with Pycharm

6. Go to settings > Terminal > Select shell path to "bash"

7. From right-bottom corner, click Python 3.10 > Add new interpreter > Add local > select inherit global package >> done

8. Create virtual environment inside the project terminal by installing them again,
= pip install django 
= pip install djangorestframework

9. Open terminal inside the project and run it from there,
= python manage.py runserver 		// keep it running, open another new terminal there
// if port not using change the port number, 8080 or 8001....
= python manage.py runserver 8080

10. Create an app inside that project with command, here example of API named App,
= python manage.py startapp api		// api is name

11. Then goto setting.py file, and add 2 value there, inside installed app section
= 'api',
= 'rest_framework'

12. Then, below setting.py there is a urls.py file, edit that,
= add "include" after path in, import
And add another line after written path,
= path ('api/', include ('api.urls'))

13. Create a new file inside api folder, name = urls.py

14. Edit model.py file, demo here=

---
# Create your models here.

size_choice = (
    ('Tiny','Tiny'),
    ('Small','Small'),
    ('Medium','Medium'),
    ('Large','Large')
)

friendliness_choice = (
    (1,1),
    (2,2),
    (3,3),
    (4,4),
    (5,5)
)

trainability_choice = (
    (1,1),
    (2,2),
    (3,3),
    (4,4),
    (5,5)
)

shedding_choice = (
    (1,1),
    (2,2),
    (3,3),
    (4,4),
    (5,5)
)
exersize_choice = (
    (1,1),
    (2,2),
    (3,3),
    (4,4),
    (5,5)
)

class Breed(models.Model):
    name = models.CharField(max_length=25)
    size = models.CharField(max_length=10, choices=size_choice)
    friendliness = models.IntegerField(choices=friendliness_choice)
    trainability = models.IntegerField(choices=trainability_choice)
    sheddingamount = models.IntegerField(choices=shedding_choice)
    exersizeneeds = models.IntegerField(choices=exersize_choice)

    def __str__(self):
        return self


gender_choice = (
    ('Male','Male'),
    ('Female','Female')
)

class Dog(models.Model):
    name = models.CharField(max_length=30)
    age = models.IntegerField()
    breed = models.ForeignKey(Breed, on_delete=models.CASCADE)
    gender = models.CharField(max_length=10,choices=gender_choice)
    color = models.CharField(max_length=10)
    food = models.CharField(max_length=20)
    toy = models.CharField(max_length=20)

    def __str__(self):
        return self

# End your models here.
---

15. Edit admin.py file, demo =
---
from django.contrib import admin
from .models import Dog, Breed

# Register your models here.

admin.site.register(Dog)
admin.site.register(Breed)
---

16. ---

17. Edit urls.py file inside api, demo:
---
from django.urls import path
from api.views import DogList, DogDetails, BreedList, BreedDetails

urlpatterns = (
    path('dogs/', DogList.as_view(), name='dog-list'),
    path('dogs/<int:pk>/', DogDetails.as_view(), name='dog-details'),
    path('breeds/', BreedList.as_view(), name='breed-list'),
    path('breeds/<int:pk>/', BreedDetails.as_view(), name='breed-details')
)
---

18. Create a file inside api, serializer.py, edit it, demo=
--
from rest_framework import serializers
from api.models import Dog, Breed

class BreedSerializer(serializers.ModelSerializer):
    class Meta:
        model = Breed
        fields = '__all__'
class DogSerializer(serializers.ModelSerializer):
        class Meta:
            model = Dog
            fields = '__all__'

--

19. Edit views.py file, demo=
---
from django.shortcuts import render
from rest_framework import generics
from api.models import Dog, Breed
from api.serializer import DogSerializer, BreedSerializer
# Create your views here.

class BreedList(generics.ListCreateAPIView):
    queryset = Breed.objects.all()
    serializer_class = BreedSerializer

class BreedDetails(generics.RetrieveUpdateDestroyAPIView):
    queryset = Breed.objects.all()
    serializer_class = BreedSerializer


class DogList(generics.ListCreateAPIView):
    queryset = Dog.objects.all()
    serializer_class = DogSerializer

class DogDetails(generics.RetrieveUpdateDestroyAPIView):
    queryset = Dog.objects.all()
    serializer_class = DogSerializer


---

20. Make Migrations= python manage.py makemigrations

21. Migrate= python manage.py migrate

22. Use postman, GET, PUT, POST, DELETE





// extraaa
Create Super User
python manage.py createsuperuser




